// schema.prisma

generator client {
  provider = "prisma-client-js"
}

//comente o c√≥digo abaixo
datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

//Descomente o abaixo
//datasource db {
// provider = "postgresql"
//url      = env("DATABASE_URL")
//}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  USER
}

model User {
  id            String                    @id @default(cuid())
  name          String
  email         String                    @unique
  emailVerified DateTime?
  image         String?
  role          Role                      @default(USER)
  accounts      Account[]
  sessions      Session[]
  appointments  ProfessionalAppointment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Type {
  PROFESSIONAL
  SERVICE
}

model Professional {
  id              String  @id @default(uuid())
  type            Type    @default(PROFESSIONAL)
  name            String
  specialty       String
  description     String
  email           String
  phone           String
  phrase          String
  qualifications  String
  photo_name      String?
  photo_extension String?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  Appointments ProfessionalAppointment[]

  @@map(name: "professional")
}

model ProfessionalAppointment {
  id              String   @id @default(uuid())
  appointmentDate DateTime @map(name: "appointment_date")
  observation     String?
  name            String?
  cpf             String?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  userId String @map(name: "user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  ProfessionalId String       @map(name: "professional_id")
  professional   Professional @relation(fields: [ProfessionalId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([ProfessionalId])
  @@map(name: "professional_appointment")
}
